CREATE TABLE MUSIC_PLAYLIST_DB.GOLD.FACT_TRACK_SALES (
    SALE_ID NUMBER(38,0) NOT NULL,
    INVOICELINE_ID NUMBER(38,0) NOT NULL,
    INVOICEID NUMBER(38,0) NOT NULL,
    TRACKID NUMBER(38,0) NOT NULL,
    TOTAL_REVENUE FLOAT,
    SALE_DATE DATE,
    primary key (SALE_ID),
    foreign key (INVOICELINE_ID) references MUSIC_PLAYLIST_DB.SILVER.DIM_INVOICELINE(INVOICELINE_ID),
    foreign key (INVOICEID) references MUSIC_PLAYLIST_DB.SILVER.DIM_INVOICE(INVOICEID),
    foreign key (TRACKID) references MUSIC_PLAYLIST_DB.SILVER.DIM_TRACK(TRACKID)
);

INSERT INTO MUSIC_PLAYLIST_DB.GOLD.FACT_TRACK_SALES (
    SALE_ID, INVOICELINE_ID, INVOICEID, TRACKID, TOTAL_REVENUE, SALE_DATE
)
SELECT 
    ROW_NUMBER() OVER (ORDER BY i.InvoiceId) AS SALE_ID,
    il.INVOICELINE_ID,
    i.INVOICEID,
    il.TRACKID,
    (il.UNIT_PRICE * il.QUANTITY) AS TOTAL_REVENUE,
    i.INVOICEDATE
FROM MUSIC_PLAYLIST_DB.SILVER.DIM_INVOICELINE il
JOIN MUSIC_PLAYLIST_DB.SILVER.DIM_INVOICE i 
    ON il.INVOICEID = i.INVOICEID;


----

CREATE  TABLE MUSIC_PLAYLIST_DB.GOLD.FACT_CUSTOMER_PURCHASE_BEHAVIOR (
    PURCHASE_ID NUMBER(38,0) NOT NULL,
    CUSTOMERID NUMBER(38,0) NOT NULL,
    INVOICEID NUMBER(38,0) NOT NULL,
    TOTAL_SPENT FLOAT,
    TRANSACTION_DATE DATE,
    primary key (PURCHASE_ID),
    foreign key (CUSTOMERID) references MUSIC_PLAYLIST_DB.SILVER.DIM_CUSTOMER(CUSTOMERID),
    foreign key (INVOICEID) references MUSIC_PLAYLIST_DB.SILVER.DIM_INVOICE(INVOICEID)
);

INSERT INTO MUSIC_PLAYLIST_DB.GOLD.FACT_CUSTOMER_PURCHASE_BEHAVIOR (
    PURCHASE_ID, CUSTOMERID, INVOICEID, TOTAL_SPENT, TRANSACTION_DATE
)
SELECT 
    ROW_NUMBER() OVER (ORDER BY i.InvoiceId) AS PURCHASE_ID,
    i.CUSTOMERID,
    i.INVOICEID,
    i.TOTAL AS TOTAL_SPENT,
    i.INVOICEDATE AS TRANSACTION_DATE
FROM MUSIC_PLAYLIST_DB.SILVER.DIM_INVOICE i;

----


CREATE OR REPLACE TABLE MUSIC_PLAYLIST_DB.GOLD.FACT_TRACK_STREAMING (
    STREAM_ID NUMBER(38,0) NOT NULL,
    PLAYLIST_ID NUMBER(38,0) NOT NULL,
    TRACKID NUMBER(38,0) NOT NULL,
    TOTAL_PLAYLIST_ADDS NUMBER(38,0),
    STREAM_DATE DATE,
    primary key (STREAM_ID),
    foreign key (PLAYLIST_ID) references MUSIC_PLAYLIST_DB.SILVER.DIM_PLAYLIST(PLAYLIST_ID),
    foreign key (TRACKID) references MUSIC_PLAYLIST_DB.SILVER.DIM_TRACK(TRACKID)
);

INSERT INTO MUSIC_PLAYLIST_DB.GOLD.FACT_TRACK_STREAMING (
    STREAM_ID, PLAYLIST_ID, TRACKID, TOTAL_PLAYLIST_ADDS, STREAM_DATE
)
SELECT 
    ROW_NUMBER() OVER (ORDER BY pt.PLAYLIST_ID) AS STREAM_ID,
    pt.PLAYLIST_ID,
    pt.TRACKID,
    COUNT(pt.TRACKID) AS TOTAL_PLAYLIST_ADDS,
    CURRENT_DATE AS STREAM_DATE
FROM MUSIC_PLAYLIST_DB.SILVER.DIM_PLAYLIST pt
GROUP BY pt.PLAYLIST_ID, pt.TRACKID;

----

CREATE OR REPLACE TABLE MUSIC_PLAYLIST_DB.GOLD.FACT_GEOGRAPHIC_SALES (
    SALE_ID NUMBER(38,0) NOT NULL,
    INVOICEID NUMBER(38,0) NOT NULL,
    CUSTOMERID NUMBER(38,0) NOT NULL,
    INVOICE_AMOUNT FLOAT,
    SALE_DATE DATE,
    primary key (SALE_ID),
    foreign key (INVOICEID) references MUSIC_PLAYLIST_DB.SILVER.DIM_INVOICE(INVOICEID),
    foreign key (CUSTOMERID) references MUSIC_PLAYLIST_DB.SILVER.DIM_CUSTOMER(CUSTOMERID)
);

INSERT INTO MUSIC_PLAYLIST_DB.GOLD.FACT_GEOGRAPHIC_SALES (
    SALE_ID, INVOICEID, CUSTOMERID, INVOICE_AMOUNT, SALE_DATE
)
SELECT 
    ROW_NUMBER() OVER (ORDER BY i.InvoiceId) AS SALE_ID,
    i.INVOICEID,
    i.CUSTOMERID,
    i.TOTAL AS INVOICE_AMOUNT,
    i.INVOICEDATE AS SALE_DATE
FROM MUSIC_PLAYLIST_DB.SILVER.DIM_INVOICE i;

-----

CREATE OR REPLACE TABLE MUSIC_PLAYLIST_DB.GOLD.FACT_EMPLOYEE_SALES (
    SALE_ID NUMBER(38,0) NOT NULL,
    EMPLOYEEID NUMBER(38,0) NOT NULL,
    INVOICEID NUMBER(38,0) NOT NULL,
    TOTAL_SALES FLOAT,
    SALE_DATE DATE,
    primary key (SALE_ID),
    foreign key (EMPLOYEEID) references MUSIC_PLAYLIST_DB.SILVER.DIM_EMPLOYEES(EMPLOYEEID),
    foreign key (INVOICEID) references MUSIC_PLAYLIST_DB.SILVER.DIM_INVOICE(INVOICEID)
);


INSERT INTO MUSIC_PLAYLIST_DB.GOLD.FACT_EMPLOYEE_SALES (
    SALE_ID, EMPLOYEEID, INVOICEID, TOTAL_SALES, SALE_DATE
)
SELECT 
    ROW_NUMBER() OVER (ORDER BY i.InvoiceId) AS SALE_ID,
    e.EMPLOYEEID,
    i.INVOICEID,
    i.TOTAL AS TOTAL_SALES,
    i.INVOICEDATE AS SALE_DATE
FROM MUSIC_PLAYLIST_DB.SILVER.DIM_CUSTOMER c
JOIN MUSIC_PLAYLIST_DB.SILVER.DIM_INVOICE i 
    ON c.CUSTOMERID = i.CUSTOMERID
JOIN MUSIC_PLAYLIST_DB.SILVER.DIM_EMPLOYEES e 
    ON c.SUPPORTREPID = e.EMPLOYEEID;


---SQL QUERIES

------Top 5 Tracks with Highest Revenue

SELECT 
    t.NAME AS TRACK_NAME,
    SUM(f.TOTAL_REVENUE) AS TOTAL_REVENUE
FROM MUSIC_PLAYLIST_DB.GOLD.FACT_TRACK_SALES f
JOIN MUSIC_PLAYLIST_DB.SILVER.DIM_TRACK t 
    ON f.TRACKID = t.TRACKID
GROUP BY t.NAME
ORDER BY TOTAL_REVENUE DESC
LIMIT 5;

-------Customer with Highest Lifetime Value (LTV)

SELECT 
    c.FIRSTNAME || ' ' || c.LASTNAME AS CUSTOMER_NAME,
    SUM(f.TOTAL_SPENT) AS TOTAL_LTV
FROM MUSIC_PLAYLIST_DB.GOLD.FACT_CUSTOMER_PURCHASE_BEHAVIOR f
JOIN MUSIC_PLAYLIST_DB.SILVER.DIM_CUSTOMER c
    ON f.CUSTOMERID = c.CUSTOMERID
GROUP BY CUSTOMER_NAME
ORDER BY TOTAL_LTV DESC
LIMIT 5;

--------Monthly Sales Trend Analysis

SELECT 
    TO_CHAR(f.SALE_DATE, 'YYYY-MM') AS MONTH,
    SUM(f.TOTAL_REVENUE) AS MONTHLY_REVENUE
FROM MUSIC_PLAYLIST_DB.GOLD.FACT_TRACK_SALES f
GROUP BY TO_CHAR(f.SALE_DATE, 'YYYY-MM')
ORDER BY MONTH;

------Top 3 Employees by Sales Performance

SELECT 
    e.FIRSTNAME || ' ' || e.LASTNAME AS EMPLOYEE_NAME,
    SUM(f.TOTAL_SALES) AS TOTAL_REVENUE_GENERATED
FROM MUSIC_PLAYLIST_DB.GOLD.FACT_EMPLOYEE_SALES f
JOIN MUSIC_PLAYLIST_DB.SILVER.DIM_EMPLOYEES e
    ON f.EMPLOYEEID = e.EMPLOYEEID
GROUP BY EMPLOYEE_NAME
ORDER BY TOTAL_REVENUE_GENERATED DESC
LIMIT 3;

------Country-Wise Revenue Distribution

SELECT 
    c.COUNTRY,
    SUM(f.INVOICE_AMOUNT) AS TOTAL_REVENUE
FROM MUSIC_PLAYLIST_DB.GOLD.FACT_GEOGRAPHIC_SALES f
JOIN MUSIC_PLAYLIST_DB.SILVER.DIM_CUSTOMER c
    ON f.CUSTOMERID = c.CUSTOMERID
GROUP BY c.COUNTRY
ORDER BY TOTAL_REVENUE DESC;
